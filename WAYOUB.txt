Git Bash et GitHub
Git Bash : Une interface en ligne de commande pour utiliser Git sur Windows, simulant un environnement Unix.
GitHub : Une plateforme en ligne permettant d'héberger des projets Git et de collaborer à plusieurs sur des dépôts de code.
Git Bash – Principes de base
Git Bash est un terminal permettant d'utiliser les commandes Git sous Windows.
Il supporte les commandes Unix comme ls, pwd, et cd, ainsi que les commandes Git.
GitHub – Principes de base
Dépôt GitHub : Un espace où le code source et son historique sont stockés.
Fonctionnalités de collaboration : Pull requests, issues, fork et merge.
GitHub facilite le partage de projets et la gestion du code à plusieurs.
Commandes basiques – Git Bash
• git init : Initialise un nouveau dépôt Git dans un répertoire.
• git status : Affiche l’état actuel du dépôt (modifications, fichiers suivis/non suivis).
• git add . : Ajoute tous les fichiers modifiés à l’index (staging area).
• git commit -m "message" : Crée un commit avec un message explicatif.
Commandes basiques – GitHub
• git remote add origin [URL] : Lie un dépôt local à un dépôt distant sur GitHub.
• git push origin master : Envoie les modifications locales vers GitHub (branche master).
• git pull origin master : Récupère les dernières modifications du dépôt GitHub vers le dépôt local.
Commandes avancées – Git Bash et GitHub
• git branch : Liste toutes les branches.
• git checkout [branch] : Bascule vers une branche spécifique.
• git merge [branch] : Fusionne une branche dans la branche actuelle.
• git clone [URL] : Clone un dépôt GitHub sur votre machine.
Fonctionnalités avancées de GitHub
• Pull Requests (PR) : Propose des modifications pour un projet. Les autres contributeurs peuvent les réviser avant intégration.
• Fork : Copie d’un dépôt pour apporter des modifications sans affecter l’original.
• Issues : Outil de suivi des bugs et des suggestions d’amélioration.
Conclusion
Git Bash et GitHub permettent de gérer des versions de code, collaborer efficacement et faciliter les workflows de développement.
Maîtriser les commandes de base est essentiel pour tirer le meilleur parti de ces outils.

Ayoub
Voici un guide étape par étape pour utiliser Git depuis la console GIT

1- Naviguer vers le dossier souhaité : cd chemin/vers/votre/dossier 
2- Initialiser un nouveau dépôt Git (si inexistant) : git init 
3- On va cloner un dépôt existant : git clone https://github.com/utilisateur/repo.git
4- On vérifier la configuration du dépôt distant avec: git remote -v
5- On va Créer et éditer un fichier texte : 
        * touch nom_du_fichier.txt  # Créer un nouveau fichier
        * nano  nom_du_fichier.txt  # Ouvrir le fichier dans l'éditeur nano
        pour sortir de l'éditeur nano: Ctrl+O et Ctrl+X

6- Ajouter des fichiers à la zone de staging : git add nom_du_fichier.txt
7- On fait un commit avec un message descriptif : git commit -m "Description des modifications"
8- Configurer le dépôt distant: git remote add origin https://github.com/utilisateur/repo.git
9- Mettre à jour la branche principale avec la commande PUSH: git push origin main

10- Aprés il nous demande pour mettre le USERNAME et PASSWORD de GITHUB qui'l est lien. Pour le MAC IOS il faut créer une TOKEN CLASSIC comme password sur setting.

11- Si on veux récupérer les changements récents du dépôt distant on utilisent PULL: git pull origin main

12- Création et gestion des branches :

       *git branch nom_nouvelle_branche  # Créer une nouvelle branche
       *git checkout nom_nouvelle_branche  # Basculer vers la nouvelle branche

13- Pour fusionner les changements d'une branche vers une autre : C'est importante de nous assurer d'être sur la branche où nous voulons appliquer les changements.

       *git checkout branche_cible
       *git merge branche_source









